{"version":3,"file":"tofu.morphstars.js","sources":["../src/utils/TessellateModifier.js","../src/core/Specimen.js","../src/utils/SpecimensLoader.js","../src/core/Vec3.js","../src/utils/bezier.js","../src/core/MorphStars.js"],"sourcesContent":["import { Face3 } from 'three';\nimport { Utils } from 'tofu.js';\n/**\n * Break faces with edges longer than maxEdgeLength\n * - not recursive\n *\n * @private\n * @author alteredq / http://alteredqualia.com/\n */\nexport default class TessellateModifier {\n  constructor(maxEdgeLength) {\n    this.maxEdgeLength = Utils.isNumber(maxEdgeLength) ? maxEdgeLength : 1;\n  }\n\n  setMaxEdgeLength(maxEdgeLength) {\n    this.maxEdgeLength = Utils.isNumber(maxEdgeLength) ? maxEdgeLength : this.maxEdgeLength;\n  }\n\n  modify(geometry) {\n    let edge;\n\n    const faces = [];\n    const faceVertexUvs = [];\n    const maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n    const fvl = geometry.faceVertexUvs.length;\n\n    for (let i = 0; i < fvl; i++) {\n      faceVertexUvs[ i ] = [];\n    }\n\n    const fl = geometry.faces.length;\n    for (let i = 0; i < fl; i++) {\n\n      const face = geometry.faces[ i ];\n\n      if (face instanceof Face3) {\n\n        const a = face.a;\n        const b = face.b;\n        const c = face.c;\n\n        const va = geometry.vertices[ a ];\n        const vb = geometry.vertices[ b ];\n        const vc = geometry.vertices[ c ];\n\n        const dab = va.distanceToSquared(vb);\n        const dbc = vb.distanceToSquared(vc);\n        const dac = va.distanceToSquared(vc);\n\n        if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\n\n          const m = geometry.vertices.length;\n\n          const triA = face.clone();\n          const triB = face.clone();\n\n          let vm = null;\n\n          if (dab >= dbc && dab >= dac) {\n\n            vm = va.clone();\n            vm.lerp(vb, 0.5);\n\n            triA.a = a;\n            triA.b = m;\n            triA.c = c;\n\n            triB.a = m;\n            triB.b = b;\n            triB.c = c;\n\n            if (face.vertexNormals.length === 3) {\n\n              const vnm = face.vertexNormals[ 0 ].clone();\n              vnm.lerp(face.vertexNormals[ 1 ], 0.5);\n\n              triA.vertexNormals[ 1 ].copy(vnm);\n              triB.vertexNormals[ 0 ].copy(vnm);\n\n            }\n\n            if (face.vertexColors.length === 3) {\n\n              const vcm = face.vertexColors[ 0 ].clone();\n              vcm.lerp(face.vertexColors[ 1 ], 0.5);\n\n              triA.vertexColors[ 1 ].copy(vcm);\n              triB.vertexColors[ 0 ].copy(vcm);\n\n            }\n\n            edge = 0;\n\n          } else if (dbc >= dab && dbc >= dac) {\n\n            vm = vb.clone();\n            vm.lerp(vc, 0.5);\n\n            triA.a = a;\n            triA.b = b;\n            triA.c = m;\n\n            triB.a = m;\n            triB.b = c;\n            triB.c = a;\n\n            if (face.vertexNormals.length === 3) {\n\n              const vnm = face.vertexNormals[ 1 ].clone();\n              vnm.lerp(face.vertexNormals[ 2 ], 0.5);\n\n              triA.vertexNormals[ 2 ].copy(vnm);\n\n              triB.vertexNormals[ 0 ].copy(vnm);\n              triB.vertexNormals[ 1 ].copy(face.vertexNormals[ 2 ]);\n              triB.vertexNormals[ 2 ].copy(face.vertexNormals[ 0 ]);\n\n            }\n\n            if (face.vertexColors.length === 3) {\n\n              const vcm = face.vertexColors[ 1 ].clone();\n              vcm.lerp(face.vertexColors[ 2 ], 0.5);\n\n              triA.vertexColors[ 2 ].copy(vcm);\n\n              triB.vertexColors[ 0 ].copy(vcm);\n              triB.vertexColors[ 1 ].copy(face.vertexColors[ 2 ]);\n              triB.vertexColors[ 2 ].copy(face.vertexColors[ 0 ]);\n\n            }\n\n            edge = 1;\n\n          } else {\n\n            vm = va.clone();\n            vm.lerp(vc, 0.5);\n\n            triA.a = a;\n            triA.b = b;\n            triA.c = m;\n\n            triB.a = m;\n            triB.b = b;\n            triB.c = c;\n\n            if (face.vertexNormals.length === 3) {\n\n              const vnm = face.vertexNormals[ 0 ].clone();\n              vnm.lerp(face.vertexNormals[ 2 ], 0.5);\n\n              triA.vertexNormals[ 2 ].copy(vnm);\n              triB.vertexNormals[ 0 ].copy(vnm);\n\n            }\n\n            if (face.vertexColors.length === 3) {\n\n              const vcm = face.vertexColors[ 0 ].clone();\n              vcm.lerp(face.vertexColors[ 2 ], 0.5);\n\n              triA.vertexColors[ 2 ].copy(vcm);\n              triB.vertexColors[ 0 ].copy(vcm);\n\n            }\n\n            edge = 2;\n\n          }\n\n          faces.push(triA, triB);\n          geometry.vertices.push(vm);\n          const jvl = geometry.faceVertexUvs.length;\n          for (let j = 0; j < jvl; j++) {\n\n            if (geometry.faceVertexUvs[ j ].length) {\n\n              const uvs = geometry.faceVertexUvs[ j ][ i ];\n\n              const uvA = uvs[ 0 ];\n              const uvB = uvs[ 1 ];\n              const uvC = uvs[ 2 ];\n\n              let uvsTriA = null;\n              let uvsTriB = null;\n              // AB\n\n              if (edge === 0) {\n\n                const uvM = uvA.clone();\n                uvM.lerp(uvB, 0.5);\n\n                uvsTriA = [ uvA.clone(), uvM.clone(), uvC.clone() ];\n                uvsTriB = [ uvM.clone(), uvB.clone(), uvC.clone() ];\n\n              // BC\n\n              } else if (edge === 1) {\n\n                const uvM = uvB.clone();\n                uvM.lerp(uvC, 0.5);\n\n                uvsTriA = [ uvA.clone(), uvB.clone(), uvM.clone() ];\n                uvsTriB = [ uvM.clone(), uvC.clone(), uvA.clone() ];\n\n              // AC\n\n              } else {\n\n                const uvM = uvA.clone();\n                uvM.lerp(uvC, 0.5);\n\n                uvsTriA = [ uvA.clone(), uvB.clone(), uvM.clone() ];\n                uvsTriB = [ uvM.clone(), uvB.clone(), uvC.clone() ];\n\n              }\n\n              faceVertexUvs[ j ].push(uvsTriA, uvsTriB);\n\n            }\n\n          }\n\n        } else {\n\n          faces.push(face);\n\n          const jvl = geometry.faceVertexUvs.length;\n\n          for (let j = 0; j < jvl; j++) {\n\n            faceVertexUvs[ j ].push(geometry.faceVertexUvs[ j ][ i ]);\n\n          }\n\n        }\n\n      }\n\n    }\n\n    geometry.faces = faces;\n    geometry.faceVertexUvs = faceVertexUvs;\n\n  }\n}\n","import { Vector3, Euler, Quaternion, Matrix4 } from 'three';\nimport { Utils } from 'tofu.js';\nimport TessellateModifier from '../utils/TessellateModifier';\n\nconst tessellateModifier = new TessellateModifier();\nconst PI2 = Math.PI * 2;\n\n/**\n * Specimen class, it can help you create points pecimen simply\n *\n * @class\n */\nclass Specimen {\n  /**\n   * config a specimen\n   * @example\n   * import { Vector3, Vector3, Euler } from 'three';\n   * import { SpecimensLoader } from 'tofu.morphstars.js';\n   * import { Utils } from 'tofu.js';\n   * const loader = new SpecimensLoader();\n   * loader.load([\n   *   new Specimen({\n   *     url: './js/uc.json',\n   *     name: 'uc',\n   *     scale: new Vector3(700, 700, 700),\n   *     translate: new Vector3(-400, 100, 0),\n   *     rotation: new Euler(Utils.DTR(72), Utils.DTR(30), Utils.DTR(60), 'ZYX'),\n   *     material: {\n   *       size: 5,\n   *     }\n   *   }),\n   *   new Specimen({\n   *     url: './js/ali.json',\n   *     name: 'ali',\n   *     scale: new Vector3(700, 700, 700),\n   *     translate: new Vector3(-400, 100, 0),\n   *     rotation: new Euler(Utils.DTR(72), Utils.DTR(30), Utils.DTR(60), 'ZYX'),\n   *     material: {\n   *       size: 5,\n   *     }\n   *   }),\n   * ]);\n   *\n   * @param {Object} options specimen config.\n   * @param {String} options.url an json-model file url.\n   * @param {String} options.name this specimen's unique name.\n   * @param {Object} [options.material] this specimen's material config, when this specimen was active.\n   * @param {Boolean} [options.autoNormalize=true] whether specimen need auto normalize geometry size or not.\n   * @param {Boolean} [options.needTessellate=false] whether specimen need be use tessellate modify or not.\n   * @param {Number} [options.edgeLength] tessellate modify max-edge-length.\n   * @param {Boolean} [options.autoApply=true] whether specimen need apply transform or not.\n   * @param {Vector3} [options.translate] how much this specimen should translate.\n   * @param {Euler} [options.rotation] how much this specimen should rotation.\n   * @param {Quaternion} [options.quaternion] how much this specimen should quaternion.\n   * @param {Vector3} [options.scale] how much this specimen should scale.\n   * @param {Boolean} [options.needWave=false] whether specimen need update wave when this specimen was active.\n   * @param {Number} [options.amplitude=0.05] wave amplitude.\n   * @param {Number} [options.frequency=70] wave frequency.\n   * @param {Number} [options.speed=0.001] wave speed.\n   */\n  constructor({ url, name, material, autoNormalize, needTessellate, edgeLength, autoApply, translate, rotation, quaternion, scale, needWave, amplitude, frequency, speed }) {\n    if (!url || !name) console.error('required url and required unique-name');\n\n    /**\n     * json-model file url\n     *\n     * @private\n     * @member {String}\n     */\n    this.url = url;\n\n    /**\n     * this specimen's unique name, will be used in MorphStars.\n     *\n     * @member {String}\n     */\n    this.name = name;\n\n    /**\n     * this specimen's material config, will be used when this specimen was active.\n     *\n     * @member {Object}\n     */\n    this.material = material;\n\n    /**\n     * whether specimen need auto normalize geometry size or not.\n     *\n     * @private\n     * @member {Boolean}\n     */\n    this._autoNormalize = Utils.isBoolean(autoNormalize) ? autoNormalize : true;\n\n    /**\n     * whether specimen need be use tessellate modify or not.\n     *\n     * @private\n     * @member {Boolean}\n     */\n    this._needTessellate = needTessellate || false;\n\n    /**\n     * tessellate modify max-edge-length.\n     *\n     * @private\n     * @member {Number}\n     */\n    this.edgeLength = edgeLength;\n\n    /**\n     * whether specimen need apply transform or not.\n     *\n     * @private\n     * @member {Boolean}\n     */\n    this._autoApply = Utils.isBoolean(autoApply) ? autoApply : true;\n\n    /**\n     * specimen's geometry.\n     *\n     * @member {Geometry}\n     */\n    this.geometry = null;\n\n    /**\n     * specimen's materials, parser from json-model.\n     *\n     * @member {Geometry}\n     */\n    this.materials = null;\n\n    /**\n     * specimen update wave cycle.\n     *\n     * @private\n     * @member {Number}\n     */\n    this._cycle = 0;\n\n    /**\n     * whether specimen need update wave when this specimen was active.\n     *\n     * @member {Boolean}\n     */\n    this.needWave = needWave || false;\n\n    /**\n     * wave amplitude.\n     *\n     * @member {Number}\n     */\n    this._amplitude = Utils.isNumber(amplitude) ? amplitude : 0.05;\n\n    /**\n     * wave frequency.\n     *\n     * @member {Number}\n     */\n    this._frequency = Utils.isNumber(frequency) ? frequency : 70;\n\n    /**\n     * wave frequency.\n     *\n     * @member {Number}\n     */\n    this._speed = Utils.isNumber(speed) ? speed : 0.001;\n\n    const _translate = new Vector3();\n    const _rotation = new Euler();\n    const _quaternion = new Quaternion();\n    const _scale = new Vector3(1, 1, 1);\n\n    Object.defineProperties(this, {\n      /**\n       * specimen's translate\n       */\n      translate: {\n        enumerable: true,\n        value: _translate,\n      },\n\n      /**\n       * specimen's rotation\n       */\n      rotation: {\n        enumerable: true,\n        value: _rotation,\n      },\n\n      /**\n       * specimen's quaternion\n       */\n      quaternion: {\n        enumerable: true,\n        value: _quaternion,\n      },\n\n      /**\n       * specimen's scale\n       */\n      scale: {\n        enumerable: true,\n        value: _scale,\n      },\n    });\n\n    const onRotationChange = () => {\n      this.quaternion.setFromEuler(this.rotation, false);\n    };\n    const onQuaternionChange = () => {\n      this.rotation.setFromQuaternion(this.quaternion, undefined, false);\n    };\n    this.rotation.onChange(onRotationChange);\n    this.quaternion.onChange(onQuaternionChange);\n\n    /**\n     * matrix for apply transform\n     * @private\n     * @member {Matrix4}\n     */\n    this.matrix = new Matrix4();\n\n    this.setup = this.setup.bind(this);\n\n    this.init({ translate, rotation, quaternion, scale });\n  }\n\n  /**\n   * @private\n   * @param {Object} transform apply transform information\n   */\n  init({ translate, rotation, quaternion, scale }) {\n    if (translate) this.translate.copy(translate);\n    if (rotation) this.rotation.copy(rotation);\n    if (quaternion) this.quaternion.copy(quaternion);\n    if (scale) this.scale.copy(scale);\n  }\n\n  /**\n   * setup geometry and materials when json-loader received model\n   * @param {Geometry} geometry specimen geometry\n   * @param {Array} materials specimen materials\n   */\n  setup(geometry, materials) {\n    this.geometry = geometry;\n    this.materials = materials;\n    this.material = this.material || (materials && materials[0]);\n\n    if (this._needTessellate) {\n      tessellateModifier.setMaxEdgeLength(this.edgeLength);\n      tessellateModifier.modify(this.geometry);\n    }\n    if (this._autoNormalize) {\n      this.geometry.normalize();\n    }\n    if (this._autoApply) {\n      this.applyTransform();\n    }\n    if (this.needWave) this.initWave();\n  }\n\n  /**\n   * apply transform for geometry\n   * @private\n   */\n  applyTransform() {\n    this.matrix.compose(this.translate, this.quaternion, this.scale);\n    this.geometry.applyMatrix(this.matrix);\n  }\n\n  /**\n   * init wave data\n   * @private\n   */\n  initWave() {\n    this._cycle = 0;\n    const length = this.geometry.vertices.length;\n    this.geometry._vertices = [];\n    for (let i = 0; i < length; i++) {\n      const vec = this.geometry.vertices[i];\n      this.geometry._vertices.push(vec.clone());\n      const r = Math.sqrt(vec.x * vec.x + vec.z * vec.z);\n      vec.y = vec.y + Math.sin(r / this._frequency + this._cycle) * r * this._amplitude;\n    }\n  }\n\n  /**\n   * update geometry with wave style\n   * @param {Number} snippet update time snippet\n   * @param {Geometry} geometry need update geometry\n   */\n  updateWave(snippet, geometry) {\n    this._cycle = Utils.euclideanModulo(this._cycle - snippet * this._speed, PI2);\n    const length = geometry.vertices.length;\n    const samsara = this.geometry.vertices.length;\n    for (let i = 0; i < length; i++) {\n      const idx = Utils.euclideanModulo(i, samsara);\n      const _vec = this.geometry._vertices[idx];\n      const vec = this.geometry.vertices[idx];\n      const point = geometry.vertices[i];\n      const r = Math.sqrt(_vec.x * _vec.x + _vec.z * _vec.z);\n      vec.y = point.y = _vec.y + Math.sin(r / this._frequency + this._cycle) * r * this._amplitude;\n    }\n    geometry.verticesNeedUpdate = true;\n  }\n}\n\nexport default Specimen;\n","import { JSONLoader, EventDispatcher } from 'three';\nimport Specimen from '../core/Specimen';\n\n/**\n * Specimens Loader, load specimen for morph-stars\n * @extends EventDispatcher\n */\nclass SpecimensLoader extends EventDispatcher {\n  constructor() {\n    super();\n    /**\n     * json loader\n     */\n    this.loader = new JSONLoader();\n\n    /**\n     * models maps\n     */\n    this.models = {};\n\n    /**\n     * total specimen\n     * @private\n     */\n    this._total = 0;\n\n    /**\n     * load failed specimen\n     * @private\n     */\n    this._failed = 0;\n\n    /**\n     * load successed specimen\n     * @private\n     */\n    this._received = 0;\n  }\n\n  /**\n   * @param {Array} specimens `Specimen` array\n   * @return {this} this\n   */\n  load(specimens) {\n    this.specimens = specimens;\n    this._total = 0;\n    this._failed = 0;\n    this._received = 0;\n\n    this.specimens.forEach(specimen => {\n      this.models[specimen.name] = specimen;\n      if (specimen instanceof Specimen) {\n        this._total++;\n        this.do(specimen);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * do load for this specimen\n   * @private\n   * @param {Specimen} specimen Specimen object\n   */\n  do(specimen) {\n    this.loader.load(\n      specimen.url,\n      (geometry, materials) => {\n        specimen.setup(geometry, materials);\n        this._received++;\n        this._check();\n      },\n      null,\n      () => {\n        this._failed++;\n        this._check();\n      }\n    );\n  }\n\n  /**\n   * check load progress\n   * @private\n   */\n  _check() {\n    this.emit('update', this.progress);\n    if (this._received + this._failed >= this._total) this.emit('complete');\n  }\n\n  /**\n   * get specimen by name\n   * @param {String} id specimen name\n   * @return {Specimen} Specimen object\n   */\n  getById(id) {\n    return this.models[id];\n  }\n\n  /**\n   * get progress\n   */\n  get progress() {\n    return this._total === 0 ? 1 : (this._received + this._failed) / this._total;\n  }\n}\n\nexport default SpecimensLoader;\n","\n/**\n * a simple vec3 class\n * @private\n */\nclass Vec3 {\n  constructor(x, y, z) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n  }\n\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n    return this;\n  }\n}\n\nexport default Vec3;\n","/**\n * bezierCurve function\n * @private\n * @param {Vector3} point 需要变换的坐标点\n * @param {Vector3} t 插值进度\n * @return {Vector3} 插值结果\n */\nfunction bezierCurve(point, t) {\n  const rT = 1 - t;\n  const start = point.start;\n  const control = point.control;\n  const end = point.end;\n\n  point.x = rT * rT * start.x\n    + 2 * t * rT * control.x\n        + t * t * end.x;\n  point.y = rT * rT * start.y\n    + 2 * t * rT * control.y\n        + t * t * end.y;\n  point.z = rT * rT * start.z\n    + 2 * t * rT * control.z\n        + t * t * end.z;\n  return point;\n}\n\nexport default bezierCurve;\n","import { Group, Geometry, PointsMaterial, TextureLoader, AdditiveBlending, Vector3, Color, NoColors, VertexColors, Points, Matrix4 } from 'three';\nimport { Utils, Tween } from 'tofu.js';\nimport Vec3 from './Vec3';\nimport bezierCurve from '../utils/bezier';\n\nconst UP = new Vector3(0, 1, 0);\nconst matrix = new Matrix4();\n\n/**\n * MorphStars, help you morph large stars between specimens\n */\nclass MorphStars extends Group {\n  /**\n   * new a morph-stars manager\n   * @param {SpecimensLoader} models SpecimensLoader object\n   * @param {Object} options morph-stars manager config\n   * @param {Array} options.specimens specimens queue, you can invoke `pre` and `next` method on that.\n   * @param {Array} [options.hovers] hovers queue, you can make stars morph to hover-specimen from any specimens.\n   * @param {String} [options.image] global image texture\n   * @param {Number} [options.size=800] space size, point space range\n   * @param {Number} [options.idels=200] idel star count\n   * @param {Number} [options.idelSize=idels * 0.7] idel star space range\n   * @param {Number} [options.dotSize=5] global star size\n   * @param {Boolean} [options.hitColor=true] whether use hit-color or not\n   * @param {Boolean} [options.autoLaunch=true] auto-launch stars\n   * @param {Number} [options.duration=1000] morph stars transition duration, unit `ms`.\n   * @param {Tween} [options.ease=Tween.Ease.In] transition timing function\n   */\n  constructor(models, { specimens, hovers, image, size, idels, idelSize, dotSize = 5, hitColor, autoLaunch, duration, ease }) {\n    super();\n\n    specimens = specimens || [];\n    hovers = hovers || [];\n    autoLaunch = Utils.isBoolean(autoLaunch) ? autoLaunch : true;\n    idels = Utils.isNumber(idels) ? idels : 200;\n    duration = Utils.isNumber(duration) ? duration : 1000;\n\n    /**\n     * all specimens pool\n     * @member {SpecimensLoader}\n     */\n    this.models = models;\n\n    /**\n     * space size, point space range\n     * @private\n     * @member {Number}\n     */\n    this._size = size || 800;\n\n    /**\n     * idel star space range\n     * @private\n     * @member {Number}\n     */\n    this._idelSize = idelSize || this._size * 0.7;\n\n    /**\n     * all morph stars quantity\n     * @private\n     * @member {Number}\n     */\n    this._quantity = 0;\n\n    /**\n     * whether use hit-color or not\n     * @member {Boolean}\n     */\n    this.hitColor = Utils.isBoolean(hitColor) ? hitColor : true;\n\n    const vertexColors = this.hitColor ? VertexColors : NoColors;\n\n    /**\n     * global texture for stars\n     * @member {Texture}\n     */\n    this.map = Utils.isString(image) ? new TextureLoader().load(image) : null;\n\n    /**\n     * morph stars geometry\n     * @member {Geometry}\n     */\n    this.morphGeo = new Geometry();\n\n    /**\n     * morph stars material\n     * @member {PointsMaterial}\n     */\n    this.morphMat = new PointsMaterial({\n      map: this.map,\n      blending: AdditiveBlending,\n      transparent: true,\n      depthWrite: false,\n      vertexColors,\n      size: dotSize,\n    });\n\n    /**\n     * morph stars mesh\n     * @member {Points}\n     */\n    this.morphMesh = new Points(this.morphGeo, this.morphMat);\n    this.add(this.morphMesh);\n\n    /**\n     * hover-specimens maps\n     * @private\n     * @member {Object}\n     */\n    this.hovers = {};\n    hovers.forEach(name => {\n      this._ship(this.models.getById(name), true);\n    });\n\n    /**\n     * specimens queue\n     * @private\n     * @member {Array}\n     */\n    this.specimens = [];\n    specimens.forEach(name => {\n      this._ship(this.models.getById(name));\n    });\n\n    /**\n     * current specimen object\n     *\n     * @member {Specimen}\n     */\n    this.specimen = null;\n\n    /**\n     * current specimens-queue cursor\n     * @private\n     * @member {Number}\n     */\n    this.cursor = -1;\n\n    /**\n     * is idle now?\n     *\n     * @member {Boolean}\n     */\n    this.idle = true;\n\n    /**\n     * morph stars transition duration\n     *\n     * @member {Number}\n     */\n    this.duration = duration;\n\n    /**\n     * current sleep-stars count\n     * @private\n     * @member {Number}\n     */\n    this.sleepNum = 0;\n\n    /**\n     * transition timing function\n     * @member {Tween}\n     */\n    this.ease = ease || Tween.Ease.In;\n\n    this.on('pretimeline', ({ snippet }) => {\n      this._updateMorph(snippet);\n      if (this.idle && this.specimen && this.specimen.needWave) {\n        this.specimen.updateWave(snippet, this.morphGeo);\n      }\n    });\n\n    /**\n     * global stars rotation with horizontal\n     * @member {Points}\n     */\n    this.spaceH = new Points(this._build(new Geometry(), idels, this._idelSize), this.morphMat.clone());\n\n    /**\n     * global stars rotation with vertical\n     * @member {Points}\n     */\n    this.spaceV = new Points(this._build(new Geometry(), idels, this._idelSize), this.morphMat.clone());\n\n    this.spaceH.animate({\n      from: {\n        'rotation.y': 0,\n      },\n      to: {\n        'rotation.y': Math.PI * 2,\n      },\n      ease: Tween.Linear.None,\n      duration: 100000,\n      infinite: true,\n    });\n    this.spaceV.animate({\n      from: {\n        'rotation.x': 0,\n      },\n      to: {\n        'rotation.x': -Math.PI * 2,\n      },\n      ease: Tween.Linear.None,\n      duration: 100000,\n      infinite: true,\n    });\n    this.add(this.spaceH, this.spaceV);\n\n    if (autoLaunch) this.launch();\n  }\n\n  _build(geo, number, size, bind) {\n    for (let i = 0; i < number; i++) {\n      const x = Utils.random(-size, size);\n      const y = Utils.random(-size, size);\n      const z = Utils.random(-size, size);\n      const point = new Vector3(x, y, z);\n      if (bind) this._bindBezier(point);\n      geo.vertices.push(point);\n      if (this.hitColor) {\n        const color = new Color('hsl(' + Utils.random(190, 220) + ', 0%, 100%)');\n        geo.colors.push(color);\n      }\n    }\n    return geo;\n  }\n\n  _bindBezier(point) {\n    point.start = new Vec3();\n    point.control = new Vec3();\n    point.end = new Vec3();\n    point.delay = 0;\n    point.progress = 0;\n    point.sleep = true;\n  }\n\n  _ship(specimen, isHover) {\n    if (specimen.geometry instanceof Geometry) {\n      this._quantity = Math.max(specimen.geometry.vertices.length, this._quantity);\n      if (isHover) {\n        const name = specimen.name || specimen.geometry.uuid;\n        this.hovers[name] = specimen;\n      } else {\n        this.specimens.push(specimen);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * launch morph stars\n   */\n  launch() {\n    this._build(this.morphGeo, this._quantity, this._size, true);\n  }\n\n  _setupMat(options) {\n    options = options || {};\n    this.morphMat.color = Utils.isUndefined(options.color) ? this.morphMat.color : options.color;\n    this.morphMat.map = Utils.isUndefined(options.map) ? this.morphMat.map ? this.morphMat.map : this.map : options.map;\n    this.morphMat.needsUpdate = true;\n  }\n\n  /**\n   * if pass number will morph to specimens-queue, if pass string will morph to hovers\n   * @param {Number|String} cursor go to which one\n   */\n  to(cursor) {\n    if (cursor === this.nowCursor) return;\n    const numType = Utils.isNumber(cursor);\n    cursor = numType ? Utils.euclideanModulo(cursor, this.specimens.length) : cursor;\n    const specimen = numType ? this.specimens[cursor] : this.hovers[cursor];\n    if (!specimen) return;\n    this.specimen = specimen;\n\n    const samsara = specimen.geometry.vertices.length;\n    for (let i = 0; i < this._quantity; i++) {\n      const point = this.morphGeo.vertices[i];\n      const index = Utils.euclideanModulo(i, samsara);\n      const end = specimen.geometry.vertices[index];\n      this._init(point, end);\n    }\n\n    this.preCursor = this.nowCursor;\n    this.nowCursor = cursor;\n    if (numType) this.cursor = cursor;\n\n    this.sleepNum = 0;\n    this.idle = false;\n\n    if (this.specimen.material.size !== this.morphMesh.material.size) {\n      this.morphMesh.animate({\n        to: {\n          'material.size': this.specimen.material.size,\n        },\n        duration: this.duration * 1.5,\n      });\n    }\n  }\n\n  /**\n   * go to next in specimens-queue\n   */\n  next() {\n    this.to(++this.cursor);\n  }\n\n  /**\n   * go to pre in specimens-queue\n   */\n  pre() {\n    this.to(--this.cursor);\n  }\n\n  _updateMorph(snippet) {\n    if (this.idle || this.cursor === -1) return;\n\n    for (let i = 0; i < this._quantity; i++) {\n      const point = this.morphGeo.vertices[i];\n      this._motion(point, snippet);\n    }\n    this.morphGeo.verticesNeedUpdate = true;\n  }\n\n  _init(from, end) {\n    const center = this._cc(from, end);\n\n    from.start.copy(from);\n    from.control.copy(center);\n    from.end.copy(end);\n    from.delay = Utils.random(0, this.duration);\n    from.progress = 0;\n    from.sleep = false;\n  }\n\n  _cc(from, end) {\n    const radian = Utils.random(0, Math.PI * 2);\n    const radius = end.clone().sub(from).length() / 3;\n    const x = Math.cos(radian) * radius;\n    const y = Math.sin(radian) * radius;\n    const offset = new Vector3(x, y, 0);\n    const center = from.clone().add(end).divideScalar(2);\n    matrix.lookAt(center, end, UP);\n    offset.applyMatrix4(matrix);\n    return center.sub(offset);\n  }\n\n  _motion(point, snippet) {\n    if (point.sleep) return;\n    if (point.delay > 0) {\n      point.delay -= Math.abs(snippet);\n      return;\n    }\n    point.progress = Utils.clamp(point.progress + snippet, 0, this.duration);\n    const progress = this.ease(point.progress / this.duration);\n    bezierCurve(point, progress);\n    if (this.spill(point)) {\n      point.sleep = true;\n      if (++this.sleepNum === this._quantity) {\n        this.idle = true;\n        this._setupMat(this.specimen.material);\n        this.emit('idel');\n      }\n    }\n  }\n\n  /**\n   * check point-progress was spill or not\n   *\n   * @private\n   * @param {Vector3} point point object\n   * @return {Boolean} whether spill or not\n   */\n  spill(point) {\n    return point.progress >= this.duration;\n  }\n}\n\nexport default MorphStars;\n"],"names":["TessellateModifier","maxEdgeLength","Utils","isNumber","geometry","edge","faces","faceVertexUvs","maxEdgeLengthSquared","fvl","length","i","fl","face","Face3","a","b","c","va","vertices","vb","vc","dab","distanceToSquared","dbc","dac","m","triA","clone","triB","vm","lerp","vertexNormals","vnm","copy","vertexColors","vcm","push","jvl","j","uvs","uvA","uvB","uvC","uvsTriA","uvsTriB","uvM","tessellateModifier","PI2","Math","PI","Specimen","url","name","material","autoNormalize","needTessellate","edgeLength","autoApply","translate","rotation","quaternion","scale","needWave","amplitude","frequency","speed","console","error","_autoNormalize","isBoolean","_needTessellate","_autoApply","materials","_cycle","_amplitude","_frequency","_speed","_translate","Vector3","_rotation","Euler","_quaternion","Quaternion","_scale","defineProperties","onRotationChange","setFromEuler","onQuaternionChange","setFromQuaternion","undefined","onChange","matrix","Matrix4","setup","bind","init","setMaxEdgeLength","modify","normalize","applyTransform","initWave","compose","applyMatrix","_vertices","vec","r","sqrt","x","z","y","sin","snippet","euclideanModulo","samsara","idx","_vec","point","verticesNeedUpdate","SpecimensLoader","loader","JSONLoader","models","_total","_failed","_received","specimens","forEach","specimen","do","load","_check","emit","progress","id","EventDispatcher","Vec3","v","bezierCurve","t","rT","start","control","end","UP","MorphStars","hovers","image","size","idels","idelSize","dotSize","hitColor","autoLaunch","duration","ease","_size","_idelSize","_quantity","VertexColors","NoColors","map","isString","TextureLoader","morphGeo","Geometry","morphMat","PointsMaterial","AdditiveBlending","morphMesh","Points","add","_ship","getById","cursor","idle","sleepNum","Tween","Ease","In","on","_updateMorph","updateWave","spaceH","_build","spaceV","animate","Linear","None","launch","geo","number","random","_bindBezier","color","Color","colors","delay","sleep","isHover","max","uuid","options","isUndefined","needsUpdate","nowCursor","numType","index","_init","preCursor","to","_motion","from","center","_cc","radian","radius","sub","cos","offset","divideScalar","lookAt","applyMatrix4","abs","clamp","spill","_setupMat","Group"],"mappings":"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"}
